You have a monthly salary of $4,000 and expenses that include rent ($1,200), groceries ($300), and miscellaneous ($500). Calculate the amount left after expenses and store it in a variable named remaining_balance.

Method1:  Using a for loop
salary = 4000
expenses = [1200, 300, 500]

remaining_balance = salary
for expense in expenses:
    remaining_balance -= expense

print("Remaining balance using for loop:", remaining_balance)

------------------------------------

Method 1A - using function:

def calculate_balance(salary, expense):
    balance = salary
    for i in expense:
        balance -= i
    return balance

salary = 9000
expense = [900, 900]

balance = calculate_balance(salary, expense)
print(int(balance))


------------------------------------------------------------------------

Method 1B: 
def some_func(salary,expenses):
    
    balance=salary
    for expense in expenses:
        balance-= expense
        
    return balance
    
salary_input=int(input("Enter salary"))
expenses_input=input("Enter expenses")
expenses=map(int,expenses_input.split(","))

total=some_func(salary_input,expenses)
print(int(total))

-------------------------------------------------------------------------------
Method 1c: Exceptions:
class NoValueError(Exception):
    pass

class NotAStringError(Exception):
    pass

class EmptyStringError(Exception):
    pass

def some_func(salary,expenses):
    
    try:
        
        if not isinstance(salary,(int,float)):
            raise NotAStringError("Please enter salary in numericals or flaot")
            
        if salary <= 0:
            raise EmptyStringError("salary cannot be zero")
        
        if not expenses:
            raise NoValueError("Expenses cannot be empty")
            
        if any(expense > salary for expense in expenses):
            raise ValueError("Expenses cannot be greater than salary")
            
        balance=salary  
        for expense in expenses:
            balance-= expense
        
        return balance
    
    except Exception as e:
        print(e)
        return None
        
    finally:
        print("balance calc is done")
        
        
try:
    for i in range(3):
        salary_input=int(input("Enter salary"))

        expenses_input=input("Enter expenses")

        expenses=list(map(int,expenses_input.split(",")))

        total=some_func(salary_input,expenses)
        if total is not None:
            print(int(total))
except:
    print("invlaid input")
------------------------------------------------------------------------------------------------------
Method 2: Using decorators without *args and **kwargs

class NoValueError(Exception):
    pass

class NotAStringError(Exception):
    pass

class EmptyStringError(Exception):
    pass

def validate_inputs(func):
    def wrapper(salary, expenses):
        try:
            if not isinstance(salary, (int, float)):
                raise NotAStringError("Please enter salary in numericals or float.")
            
            if salary <= 0:
                raise EmptyStringError("Salary cannot be zero.")
            
            if not expenses:
                raise NoValueError("Expenses cannot be empty.")
            
            if any(expense > salary for expense in expenses):
                raise ValueError("An individual expense cannot be greater than the salary.")
            
            return func(salary, expenses)
        except Exception as e:
            print(e)
            return None
        finally:
            print("Balance calculation is done.")
    return wrapper

@validate_inputs
def some_func(salary, expenses):
    balance = salary
    for expense in expenses:
        balance -= expense
    return balance

# Execution
for _ in range(3):
    try:
        salary_input = int(input("Enter salary: "))
        expenses_input = input("Enter expenses (comma-separated): ")
        expenses = list(map(int, expenses_input.split(",")))
        total = some_func(salary_input, expenses)
        if total is not None:
            print(f"Remaining balance: {total}")
            break
    except ValueError:
        print("Invalid input. Please enter valid numerical values.")


------------------------------
Method 3:   Using a decorator with both *args and **kwargs

def validate_inputs(func):
    def wrapper(*args, **kwargs):
        try:
            salary = kwargs.get("salary") if "salary" in kwargs else args[0]
            expenses = kwargs.get("expenses") if "expenses" in kwargs else args[1]
            
            if not isinstance(salary, (int, float)):
                raise NotAStringError("Please enter salary in numericals or float.")
            
            if salary <= 0:
                raise EmptyStringError("Salary cannot be zero.")
            
            if not expenses:
                raise NoValueError("Expenses cannot be empty.")
            
            if any(expense > salary for expense in expenses):
                raise ValueError("An individual expense cannot be greater than the salary.")
            
            return func(*args, **kwargs)
        except Exception as e:
            print(e)
            return None
        finally:
            print("Balance calculation is done.")
    return wrapper

@validate_inputs
def some_func(salary, expenses):
    balance = salary
    for expense in expenses:
        balance -= expense
    return balance

# Execution
for _ in range(3):
    try:
        salary_input = int(input("Enter salary: "))
        expenses_input = input("Enter expenses (comma-separated): ")
        expenses = list(map(int, expenses_input.split(",")))
        total = some_func(salary=salary_input, expenses=expenses)
        if total is not None:
            print(f"Remaining balance: {total}")
            break
    except ValueError:
        print("Invalid input. Please enter valid numerical values.")


------------------------------------------------------------
Method 4: Using a decorator with **kwargs

def validate_inputs(func):
    def wrapper(**kwargs):
        try:
            salary = kwargs.get("salary")
            expenses = kwargs.get("expenses")
            
            if not isinstance(salary, (int, float)):
                raise NotAStringError("Please enter salary in numericals or float.")
            
            if salary <= 0:
                raise EmptyStringError("Salary cannot be zero.")
            
            if not expenses:
                raise NoValueError("Expenses cannot be empty.")
            
            if any(expense > salary for expense in expenses):
                raise ValueError("An individual expense cannot be greater than the salary.")
            
            return func(**kwargs)
        except Exception as e:
            print(e)
            return None
        finally:
            print("Balance calculation is done.")
    return wrapper

@validate_inputs
def some_func(salary=None, expenses=None):
    balance = salary
    for expense in expenses:
        balance -= expense
    return balance

# Execution
for _ in range(3):
    try:
        salary_input = int(input("Enter salary: "))
        expenses_input = input("Enter expenses (comma-separated): ")
        expenses = list(map(int, expenses_input.split(",")))
        total = some_func(salary=salary_input, expenses=expenses)
        if total is not None:
            print(f"Remaining balance: {total}")
            break
    except ValueError:
        print("Invalid input. Please enter valid numerical values.")


-------------------------------------------------
Method 5: Using a decorator with *args


def validate_inputs(func):
    def wrapper(*args):
        try:
            salary = args[0]
            expenses = args[1]
            
            if not isinstance(salary, (int, float)):
                raise NotAStringError("Please enter salary in numericals or float.")
            
            if salary <= 0:
                raise EmptyStringError("Salary cannot be zero.")
            
            if not expenses:
                raise NoValueError("Expenses cannot be empty.")
            
            if any(expense > salary for expense in expenses):
                raise ValueError("An individual expense cannot be greater than the salary.")
            
            return func(*args)
        except Exception as e:
            print(e)
            return None
        finally:
            print("Balance calculation is done.")
    return wrapper

@validate_inputs
def some_func(salary, expenses):
    balance = salary
    for expense in expenses:
        balance -= expense
    return balance

# Execution
for _ in range(3):
    try:
        salary_input = int(input("Enter salary: "))
        expenses_input = input("Enter expenses (comma-separated): ")
        expenses = list(map(int, expenses_input.split(",")))
        total = some_func(salary_input, expenses)
        if total is not None:
            print(f"Remaining balance: {total}")
            break
    except ValueError:
        print("Invalid input. Please enter valid numerical values.")

remaining_bal = some_func(10000, [500, 500])
print("Remaining Balance (using args):", remaining_bal)

