# A store sells apples at $5 each and bananas at $3 each. Declare variables apples_price and bananas_price with appropriate values. 
Calculate the total cost for purchasing 10 apples and 7 bananas and store the result in total_cost. 

USE PYTEST FRAMEWORK

This is calculate_py
apple_price=5
banana_price=3

def calculate_total_cost(apple_count,banana_count):
    return (apple_price*apple_count + banana_price*banana_count)
    
    
#Create one more file called test using pytest
import pytest

def test_calculate_total_cost():
    
    assert calculate_total_cost(1,1) == 8
    

The function to calcualte the total cost is in seperate file. The test cases are written in seperate file. We use pytest because pytest framework allows to add as many test cases in future. 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
method 2:

apple_price=int(input("Enter the apple price"))
apple_count=int(input("Enter the apple count"))
banana_price=int(input("Enter the banana price"))
banana_count=int(input("Enter the banana count"))

def total_cost(apple_count,banana_count):
    return apple_price*apple_count+banana_price*banana_count
    
print("Total cost is-->",apple_price*apple_count+banana_price*banana_count)

----------------------------------------------------------------------------------------------------------------------
method 3: using decorators and *argrs and **kwargs
apple_price=int(input("Enter apple price"))
banana_price=int(input("Enter banana price"))
apple_count=int(input("Enter apple count"))
banana_count=int(input("Enter banana count"))

def deco(func):
    def wrapper(*args,**kwargs):
        return func(*args,**kwargs)
        print("Before wrapper")
    return wrapper
    
@deco
def total_cost(apple_count,banana_count):
    return apple_price*apple_count +banana_price*banana_count
    
total_cost(apple_count,banana_count)

print("The total cost is", total_cost(apple_count,banana_count))
--------------------------------------------------------------------------------------------------------------
method 4: using only *args ie only positional argument

apple_price=int(input("Enter apple price"))
banana_price=int(input("Enter banana price"))
apple_count=int(input("Enter apple count"))
banana_count=int(input("Enter banana count"))

def deco(func):
    def wrapper(*args):
        return func(*args)
        print("Before wrapper")
    return wrapper
    
@deco
def total_cost(apple_count,banana_count):
    return apple_price*apple_count +banana_price*banana_count
    
total_cost(apple_count,banana_count)

print("The total cost is", total_cost(apple_count,banana_count))
---------------------------------------------------------------------------------------------------------
method 5: using only **kwargs ie only keyword arguments


apple_price=int(input("Enter apple price"))
banana_price=int(input("Enter banana price"))
apple_count=int(input("Enter apple count"))
banana_count=int(input("Enter banana count"))

def deco(func):
    def wrapper(**kwargs):
        return func(**kwargs)
        print("Before wrapper")
    return wrapper
    
@deco
def total_cost(**kwargs):
    apple_count=kwargs.get("apple_count",0)
    banana_count=kwargs.get("banana_count",0)
    return apple_price*apple_count +banana_price*banana_count


print("The total cost is", apple_price*apple_count +banana_price*banana_count)





